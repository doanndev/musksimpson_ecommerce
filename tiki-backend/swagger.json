{
  "openapi": "3.0.0",
  "info": {
    "title": "Vona API",
    "version": "1.0.0",
    "description": "API documentation for Vona application"
  },
  "servers": [
    {
      "url": "http://localhost:3003/api/v1",
      "description": "Development server"
    }
  ],
  "tags": [
    { "name": "Users", "description": "User management endpoints" },
    {
      "name": "Auth",
      "description": "Authentication and authorization endpoints"
    },
    { "name": "Products", "description": "Product management endpoints" },
    { "name": "Addresses", "description": "User address management endpoints" },
    {
      "name": "RateLimit",
      "description": "Rate limiting information endpoints"
    },
    { "name": "Permissions", "description": "Permission management endpoints" },
    { "name": "Orders", "description": "Order management endpoints" },
    { "name": "Categories", "description": "Category management endpoints" },
    { "name": "CartItems", "description": "Cart item management endpoints" },
    { "name": "Chatbot", "description": "Chatbot interaction endpoints" },
    { "name": "Payments", "description": "Payment processing endpoints" },
    { "name": "Reviews", "description": "Product review management endpoints" }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "Get list of users",
        "description": "Retrieve a paginated list of users with optional filters (requires user login)",
        "operationId": "getAllUsers",
        "tags": ["Users"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter parameters",
            "schema": { "$ref": "#/components/schemas/UserFilter" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Create a new user with provided data",
        "operationId": "createUser",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCreateInput" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/users/user": {
      "get": {
        "summary": "Get current user",
        "description": "Retrieve the details of the currently authenticated user",
        "operationId": "getUserByOne",
        "tags": ["Users"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Current user details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieve a user by their UUID (requires admin login)",
        "operationId": "getUserById",
        "tags": ["Users"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "UUID of the user",
            "schema": { "$ref": "#/components/schemas/UserIdParam" }
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a user",
        "description": "Update user details by UUID (requires user login)",
        "operationId": "updateUser",
        "tags": ["Users"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "UUID of the user",
            "schema": { "$ref": "#/components/schemas/UserIdParam" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdateInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Delete a user by UUID (requires user login)",
        "operationId": "deleteUser",
        "tags": ["Users"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "UUID of the user",
            "schema": { "$ref": "#/components/schemas/UserIdParam" }
          }
        ],
        "responses": {
          "204": { "description": "User deleted successfully" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/users/upload-avatar/{userId}": {
      "post": {
        "summary": "Upload user avatar",
        "description": "Upload an avatar image for a user by UUID (requires user login)",
        "operationId": "uploadAvatar",
        "tags": ["Users"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "UUID of the user",
            "schema": { "$ref": "#/components/schemas/UserIdParam" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary",
                    "description": "Avatar image file"
                  }
                },
                "required": ["avatar"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Avatar uploaded successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid file or input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticate user and return JWT token or 2FA requirement",
        "operationId": "login",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful or 2FA required",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "User registration",
        "description": "Register a new user",
        "operationId": "register",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "User logout",
        "description": "Log out the current user (invalidates JWT token)",
        "operationId": "logout",
        "tags": ["Auth"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "204": { "description": "Logout successful" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/logout-all": {
      "post": {
        "summary": "Logout from all devices",
        "description": "Log out the user from all devices (invalidates all tokens)",
        "operationId": "logoutAllDevices",
        "tags": ["Auth"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "204": { "description": "Logout from all devices successful" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/refresh-token": {
      "post": {
        "summary": "Refresh JWT token",
        "description": "Generate a new JWT token using a valid refresh token",
        "operationId": "refreshToken",
        "tags": ["Auth"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "New JWT token generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "New JWT token"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "summary": "Request password reset",
        "description": "Send a password reset link to the user’s email",
        "operationId": "forgotPassword",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ForgotPasswordRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset link sent",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password/{userId}/{token}": {
      "post": {
        "summary": "Reset password",
        "description": "Reset user password using a reset token",
        "operationId": "resetPassword",
        "tags": ["Auth"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "UUID of the user",
            "schema": { "$ref": "#/components/schemas/UserIdParam" }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Password reset token",
            "schema": { "$ref": "#/components/schemas/ResetPasswordTokenParam" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResetPasswordRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input or token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/enable-2fa": {
      "post": {
        "summary": "Enable two-factor authentication",
        "description": "Enable 2FA for the authenticated user",
        "operationId": "enableTwoFactor",
        "tags": ["Auth"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "2FA enabled successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/auth/verify-2fa": {
      "post": {
        "summary": "Verify two-factor authentication",
        "description": "Verify 2FA code to complete login",
        "operationId": "verifyTwoFactor",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TwoFactorRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "2FA verification successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid 2FA code",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "summary": "Get list of products",
        "description": "Retrieve a paginated list of products with optional filters",
        "operationId": "getAllProducts",
        "tags": ["Products"],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter parameters for products",
            "schema": { "$ref": "#/components/schemas/ProductFilter" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new product",
        "description": "Create a new product with provided data (requires admin login)",
        "operationId": "createProduct",
        "tags": ["Products"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductCreateInput" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProductResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/products/{uuid}": {
      "get": {
        "summary": "Get a product by UUID",
        "description": "Retrieve a product by its UUID",
        "operationId": "getProductById",
        "tags": ["Products"],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "UUID of the product",
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProductResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid UUID",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a product",
        "description": "Update a product by its UUID (requires admin login)",
        "operationId": "updateProduct",
        "tags": ["Products"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "UUID of the product",
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductUpdateInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProductResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input or UUID",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a product",
        "description": "Delete a product by its UUID (requires admin login)",
        "operationId": "deleteProduct",
        "tags": ["Products"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "UUID of the product",
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "204": { "description": "Product deleted successfully" },
          "400": {
            "description": "Invalid UUID",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/addresses": {
      "get": {
        "summary": "Get list of addresses",
        "description": "Retrieve a list of addresses for the authenticated user",
        "operationId": "getAllAddresses",
        "tags": ["Addresses"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of addresses",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new address",
        "description": "Create a new address for the authenticated user",
        "operationId": "createAddress",
        "tags": ["Addresses"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddressCreateInput" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AddressResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/addresses/{id}": {
      "get": {
        "summary": "Get address by ID",
        "description": "Retrieve details of a specific address by ID",
        "operationId": "getAddressById",
        "tags": ["Addresses"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "Address details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AddressResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update address",
        "description": "Update an existing address by ID",
        "operationId": "updateAddress",
        "tags": ["Addresses"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddressUpdateInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AddressResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete address",
        "description": "Delete an address by ID",
        "operationId": "deleteAddress",
        "tags": ["Addresses"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "Address deleted successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/rate-limit": {
      "get": {
        "summary": "Get rate limit information",
        "description": "Retrieve rate limit information for the API",
        "operationId": "getRateLimit",
        "tags": ["RateLimit"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Rate limit information",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "summary": "Get list of permissions",
        "description": "Retrieve a list of permissions (requires MANAGE_PERMISSIONS)",
        "operationId": "getAllPermissions",
        "tags": ["Permissions"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of permissions",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "Get list of orders",
        "description": "Retrieve a paginated list of orders for the authenticated user",
        "operationId": "getAllOrders",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of orders",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new order",
        "description": "Create a new order with provided data",
        "operationId": "createOrder",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrderCreateInput" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrderResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/orders/{uuid}": {
      "get": {
        "summary": "Get order by UUID",
        "description": "Retrieve details of a specific order by UUID",
        "operationId": "getOrderById",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "uuid", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "Order details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrderResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update order status",
        "description": "Update the status of an order by UUID (requires MANAGE_ORDERS)",
        "operationId": "updateOrderStatus",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "uuid", "in": "path", "required": true }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrderStatusUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order status updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrderResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "summary": "Get list of categories",
        "description": "Retrieve a paginated list of categories",
        "operationId": "getAllCategories",
        "tags": ["Categories"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of categories to return"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of categories to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new category",
        "description": "Create a new category (requires MANAGE_CATEGORIES)",
        "operationId": "createCategory",
        "tags": ["Categories"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CategoryCreateInput" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CategoryResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/categories/{uuid}": {
      "get": {
        "summary": "Get category by UUID",
        "description": "Retrieve details of a specific category by UUID",
        "operationId": "getCategoryById",
        "tags": ["Categories"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "uuid", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "Category details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CategoryResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update category",
        "description": "Update an existing category by UUID (requires MANAGE_CATEGORIES)",
        "operationId": "updateCategory",
        "tags": ["Categories"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "uuid", "in": "path", "required": true }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CategoryUpdateInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CategoryResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete category",
        "description": "Delete a category by UUID (requires MANAGE_CATEGORIES)",
        "operationId": "deleteCategory",
        "tags": ["Categories"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "uuid", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/cart-items/user/{user_id}": {
      "get": {
        "summary": "Get cart items by user",
        "description": "Retrieve cart items for a specific user",
        "operationId": "getCartItemsByUser",
        "tags": ["CartItems"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "user_id", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "List of cart items",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/cart-items": {
      "post": {
        "summary": "Add item to cart",
        "description": "Add a new item to the cart",
        "operationId": "createCartItem",
        "tags": ["CartItems"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CartItemCreateInput" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cart item added successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CartItemResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/cart-items/{id}": {
      "put": {
        "summary": "Update cart item",
        "description": "Update quantity of a cart item by ID",
        "operationId": "updateCartItem",
        "tags": ["CartItems"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CartItemUpdateInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart item updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CartItemResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Cart item not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete cart item",
        "description": "Delete a cart item by ID",
        "operationId": "deleteCartItem",
        "tags": ["CartItems"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "Cart item deleted successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Cart item not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/cart-items/admin/user/{user_id}": {
      "get": {
        "summary": "Get cart items by user (Admin)",
        "description": "Retrieve cart items for a specific user (requires MANAGE_ORDERS)",
        "operationId": "getAdminCartItemsByUser",
        "tags": ["CartItems"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "user_id", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "List of cart items",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/chatbot": {
      "post": {
        "summary": "Interact with chatbot",
        "description": "Send a message to the chatbot and receive a response",
        "operationId": "interactWithChatbot",
        "tags": ["Chatbot"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": { "type": "string", "minLength": 1 }
                },
                "required": ["message"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chatbot response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/payments/paypal": {
      "post": {
        "summary": "Create PayPal payment",
        "description": "Initiate a PayPal payment for an order",
        "operationId": "createPayPalPayment",
        "tags": ["Payments"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentCreateInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "PayPal payment created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/payments/paypal/capture": {
      "get": {
        "summary": "Capture PayPal payment",
        "description": "Capture a PayPal payment for an order",
        "operationId": "capturePayPalPayment",
        "tags": ["Payments"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "orderId", "in": "query", "required": true }],
        "responses": {
          "200": {
            "description": "Payment captured successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/payments/paypal/cancel": {
      "get": {
        "summary": "Cancel PayPal payment",
        "description": "Cancel a PayPal payment process",
        "operationId": "cancelPayPalPayment",
        "tags": ["Payments"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Payment cancelled successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "400": {
            "description": "Cancellation failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/payments/admin/paypal": {
      "post": {
        "summary": "Create PayPal payment (Admin)",
        "description": "Initiate a PayPal payment for an order (requires MANAGE_ORDERS)",
        "operationId": "createAdminPayPalPayment",
        "tags": ["Payments"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentCreateInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "PayPal payment created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/payments/admin/paypal/capture": {
      "get": {
        "summary": "Capture PayPal payment (Admin)",
        "description": "Capture a PayPal payment for an order (requires MANAGE_ORDERS)",
        "operationId": "captureAdminPayPalPayment",
        "tags": ["Payments"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "orderId", "in": "query", "required": true }],
        "responses": {
          "200": {
            "description": "Payment captured successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/reviews": {
      "get": {
        "summary": "Get list of reviews",
        "description": "Retrieve a paginated list of reviews with optional filters",
        "operationId": "getAllReviews",
        "tags": ["Reviews"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter parameters",
            "schema": { "$ref": "#/components/schemas/ReviewFilter" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reviews",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new review",
        "description": "Create a new review for a product (requires CREATE_REVIEW or ownership)",
        "operationId": "createReview",
        "tags": ["Reviews"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReviewCreateInput" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReviewResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/reviews/{uuid}": {
      "get": {
        "summary": "Get review by UUID",
        "description": "Retrieve details of a specific review by UUID",
        "operationId": "getReviewById",
        "tags": ["Reviews"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "uuid", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "Review details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReviewResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Review not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete review",
        "description": "Delete a review by UUID (requires DELETE_REVIEW or ownership)",
        "operationId": "deleteReview",
        "tags": ["Reviews"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "uuid", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "Review deleted successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Review not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/reviews/admin/{uuid}": {
      "delete": {
        "summary": "Delete review (Admin)",
        "description": "Delete a review by UUID (requires DELETE_REVIEW)",
        "operationId": "deleteAdminReview",
        "tags": ["Reviews"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "uuid", "in": "path", "required": true }],
        "responses": {
          "200": {
            "description": "Review deleted successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Review not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "UserResponse": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "username": { "type": "string" },
          "full_name": { "type": "string", "nullable": true },
          "email": { "type": "string", "format": "email" },
          "phone_number": { "type": "string", "nullable": true },
          "day_of_birth": { "type": "string", "nullable": true },
          "is_public": { "type": "boolean" },
          "is_deleted": { "type": "boolean" },
          "gender": { "type": "boolean", "nullable": true },
          "role_id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "avatar": { "type": "string", "nullable": true },
          "created_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          },
          "updated_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          },
          "addresses": { "type": "array", "items": {} },
          "orders": { "type": "array", "items": {} },
          "cart_items": { "type": "array", "items": {} },
          "reviews": { "type": "array", "items": {} },
          "conversations": { "type": "array", "items": {} }
        },
        "required": [
          "uuid",
          "username",
          "full_name",
          "email",
          "phone_number",
          "day_of_birth",
          "is_public",
          "is_deleted",
          "gender",
          "role_id",
          "avatar",
          "created_at",
          "updated_at"
        ]
      },
      "UserCreateInput": {
        "type": "object",
        "properties": {
          "username": { "type": "string", "minLength": 3 },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "minLength": 6 },
          "full_name": { "type": "string", "nullable": true },
          "phone_number": { "type": "string", "nullable": true },
          "day_of_birth": { "type": "string", "nullable": true },
          "gender": { "type": "boolean" },
          "avatar": { "type": "string" },
          "role_id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "default": 1
          },
          "is_public": { "type": "boolean", "default": true },
          "is_activated": { "type": "boolean", "default": true }
        },
        "required": [
          "username",
          "email",
          "password",
          "full_name",
          "phone_number",
          "day_of_birth",
          "role_id",
          "is_public",
          "is_activated"
        ]
      },
      "UserUpdateInput": {
        "type": "object",
        "properties": {
          "two_factor_enabled": { "type": "boolean" },
          "username": { "type": "string", "minLength": 3 },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "minLength": 6 },
          "full_name": { "type": "string", "nullable": true },
          "phone_number": { "type": "string", "nullable": true },
          "day_of_birth": { "type": "string", "nullable": true },
          "gender": { "type": "boolean" },
          "avatar": { "type": "string" },
          "role_id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "default": 1
          },
          "is_public": { "type": "boolean", "default": true },
          "is_activated": { "type": "boolean", "default": true }
        },
        "required": [
          "username",
          "email",
          "password",
          "full_name",
          "phone_number",
          "day_of_birth",
          "role_id",
          "is_public",
          "is_activated"
        ]
      },
      "UserFilter": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "username": { "type": "string", "minLength": 3 },
          "full_name": { "type": "string" },
          "phone_number": { "type": "string" },
          "sort_by_name": { "type": "string", "enum": ["asc", "desc"] },
          "sort_by_date": { "type": "string", "enum": ["newest", "oldest"] },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "offset": { "type": "integer", "minimum": 0 }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "username": { "type": "string", "minLength": 3 },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "minLength": 6 },
          "twoFactorCode": { "type": "string" }
        },
        "required": ["password"]
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "username": { "type": "string", "minLength": 3 },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "minLength": 6 }
        },
        "required": ["username", "email", "password"]
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "properties": { "email": { "type": "string", "format": "email" } },
        "required": ["email"]
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": { "password": { "type": "string", "minLength": 6 } },
        "required": ["password"]
      },
      "TwoFactorRequest": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "twoFactorCode": { "type": "string", "minLength": 6, "maxLength": 6 }
        },
        "required": ["email", "twoFactorCode"]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": { "type": "string" },
          "twoFactorRequired": { "type": "boolean" },
          "uuid": { "type": "string", "format": "uuid" },
          "username": { "type": "string" },
          "full_name": { "type": "string", "nullable": true },
          "email": { "type": "string", "format": "email" },
          "phone_number": { "type": "string", "nullable": true },
          "day_of_birth": { "type": "string", "nullable": true },
          "is_public": { "type": "boolean" },
          "is_deleted": { "type": "boolean" },
          "gender": { "type": "boolean", "nullable": true },
          "role_id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "avatar": { "type": "string", "nullable": true },
          "created_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          },
          "updated_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          },
          "addresses": { "type": "array", "items": {} },
          "orders": { "type": "array", "items": {} },
          "cart_items": { "type": "array", "items": {} },
          "reviews": { "type": "array", "items": {} },
          "conversations": { "type": "array", "items": {} }
        },
        "required": [
          "uuid",
          "username",
          "full_name",
          "email",
          "phone_number",
          "day_of_birth",
          "is_public",
          "is_deleted",
          "gender",
          "role_id",
          "avatar",
          "created_at",
          "updated_at"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": { "type": "string" },
          "data": { "nullable": true },
          "statusCode": { "type": "number" }
        },
        "required": ["error", "statusCode"]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "data": {},
          "statusCode": { "type": "number" }
        },
        "required": ["message", "statusCode"]
      },
      "UserIdParam": {
        "type": "object",
        "properties": { "userId": { "type": "string", "format": "uuid" } },
        "required": ["userId"]
      },
      "ResetPasswordTokenParam": {
        "type": "object",
        "properties": { "token": { "type": "string" } },
        "required": ["token"]
      },
      "ProductResponse": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "price": { "type": "number" },
          "stock": { "type": "number" },
          "category_id": { "type": "number" },
          "is_deleted": { "type": "boolean" },
          "images": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": { "type": "string", "format": "uri" },
                "is_primary": { "type": "boolean", "default": false }
              },
              "required": ["url", "is_primary"]
            }
          },
          "specifications": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": { "type": "string", "minLength": 1 },
                "value": { "type": "string", "minLength": 1 }
              },
              "required": ["key", "value"]
            }
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "minLength": 1 },
                "value": { "type": "string", "minLength": 1 }
              },
              "required": ["name", "value"]
            }
          },
          "created_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          },
          "updated_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          }
        },
        "required": [
          "uuid",
          "name",
          "description",
          "price",
          "stock",
          "category_id",
          "is_deleted",
          "created_at",
          "updated_at"
        ]
      },
      "ProductCreateInput": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "minLength": 1 },
          "description": { "type": "string" },
          "price": { "type": "number", "minimum": 0, "exclusiveMinimum": true },
          "stock": { "type": "integer", "minimum": 0 },
          "category_id": { "type": "string", "format": "uuid" },
          "images": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": { "type": "string", "format": "uri" },
                "is_primary": { "type": "boolean", "default": false }
              },
              "required": ["url", "is_primary"]
            },
            "default": []
          },
          "specifications": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": { "type": "string", "minLength": 1 },
                "value": { "type": "string", "minLength": 1 }
              },
              "required": ["key", "value"]
            },
            "default": []
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "minLength": 1 },
                "value": { "type": "string", "minLength": 1 }
              },
              "required": ["name", "value"]
            },
            "default": []
          }
        },
        "required": ["name", "price", "stock", "category_id", "images", "specifications", "attributes"]
      },
      "ProductUpdateInput": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "minLength": 1 },
          "description": { "type": "string" },
          "price": { "type": "number", "minimum": 0, "exclusiveMinimum": true },
          "stock": { "type": "integer", "minimum": 0 },
          "category_id": { "type": "string", "format": "uuid" },
          "images": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": { "type": "string", "format": "uri" },
                "is_primary": { "type": "boolean", "default": false }
              },
              "required": ["url", "is_primary"]
            },
            "default": []
          },
          "specifications": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": { "type": "string", "minLength": 1 },
                "value": { "type": "string", "minLength": 1 }
              },
              "required": ["key", "value"]
            },
            "default": []
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "minLength": 1 },
                "value": { "type": "string", "minLength": 1 }
              },
              "required": ["name", "value"]
            },
            "default": []
          }
        }
      },
      "ProductFilter": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "category_id": { "type": "string", "format": "uuid" },
          "min_price": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "max_price": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "sort_by_price": { "type": "string", "enum": ["asc", "desc"] },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "offset": { "type": "integer", "minimum": 0 }
        }
      },
      "ProductIdParam": {
        "type": "object",
        "properties": { "productId": { "type": "string", "format": "uuid" } },
        "required": ["productId"]
      },
      "AddressCreateInput": {
        "type": "object",
        "properties": {
          "user_id": { "type": "string", "format": "uuid" },
          "address": { "type": "string", "minLength": 1 },
          "ward": { "type": "string" },
          "district": { "type": "string" },
          "province": { "type": "string" },
          "type_address": {
            "type": "string",
            "enum": ["HOME", "WORK", "OTHER"]
          },
          "is_default": { "type": "boolean", "default": false }
        },
        "required": ["user_id", "address", "is_default"]
      },
      "AddressUpdateInput": {
        "type": "object",
        "properties": {
          "user_id": { "type": "string", "format": "uuid" },
          "address": { "type": "string", "minLength": 1 },
          "ward": { "type": "string" },
          "district": { "type": "string" },
          "province": { "type": "string" },
          "type_address": {
            "type": "string",
            "enum": ["HOME", "WORK", "OTHER"]
          },
          "is_default": { "type": "boolean", "default": false },
          "id": { "type": "integer", "minimum": 0, "exclusiveMinimum": true }
        }
      },
      "AddressResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "minimum": 0, "exclusiveMinimum": true },
          "user_id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "address": { "type": "string" },
          "ward": { "type": "string", "nullable": true },
          "district": { "type": "string", "nullable": true },
          "province": { "type": "string", "nullable": true },
          "type_address": {
            "type": "string",
            "nullable": true,
            "enum": ["HOME", "WORK", "OTHER", null]
          },
          "is_default": { "type": "boolean" },
          "created_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          },
          "updated_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          }
        },
        "required": [
          "id",
          "user_id",
          "address",
          "ward",
          "district",
          "province",
          "type_address",
          "is_default",
          "created_at",
          "updated_at"
        ]
      },
      "CartItemCreateInput": {
        "type": "object",
        "properties": {
          "user_id": { "type": "string", "format": "uuid" },
          "product_id": { "type": "string", "format": "uuid" },
          "quantity": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        },
        "required": ["user_id", "product_id", "quantity"]
      },
      "CartItemUpdateInput": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        },
        "required": ["quantity"]
      },
      "CartItemResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "minimum": 0, "exclusiveMinimum": true },
          "user_id": { "type": "number" },
          "product_id": { "type": "number" },
          "quantity": { "type": "number" },
          "created_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          },
          "updated_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          }
        },
        "required": ["id", "user_id", "product_id", "quantity", "created_at", "updated_at"]
      },
      "CategoryCreateInput": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "minLength": 1 },
          "description": { "type": "string" },
          "parent_id": { "type": "string", "format": "uuid" },
          "breadcrumbs": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CategoryBreadcrumb" },
            "default": []
          }
        },
        "required": ["name", "breadcrumbs"]
      },
      "CategoryUpdateInput": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "minLength": 1 },
          "description": { "type": "string" },
          "parent_id": { "type": "string", "format": "uuid" },
          "breadcrumbs": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CategoryBreadcrumb" },
            "default": []
          }
        }
      },
      "CategoryResponse": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "parent_id": { "type": "number", "nullable": true },
          "is_deleted": { "type": "boolean" },
          "breadcrumbs": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CategoryBreadcrumb" }
          },
          "created_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          },
          "updated_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          }
        },
        "required": ["uuid", "name", "description", "parent_id", "is_deleted", "created_at", "updated_at"]
      },
      "CategoryBreadcrumb": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "minLength": 1 },
          "path": { "type": "string", "minLength": 1 },
          "level": { "type": "integer", "minimum": 0 }
        },
        "required": ["name", "path", "level"]
      },
      "OrderCreateInput": {
        "type": "object",
        "properties": {
          "user_id": { "type": "string", "format": "uuid" },
          "address_id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderItem" },
            "minItems": 1
          }
        },
        "required": ["user_id", "address_id", "items"]
      },
      "OrderStatusUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["PENDING", "PROCESSING", "SHIPPING", "DELIVERED", "CANCELLED"]
          }
        },
        "required": ["status"]
      },
      "OrderResponse": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "user_id": { "type": "number" },
          "address_id": { "type": "number" },
          "total_amount": { "type": "number" },
          "status": { "type": "string" },
          "is_deleted": { "type": "boolean" },
          "items": { "type": "array", "items": {} },
          "created_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          },
          "updated_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          }
        },
        "required": [
          "uuid",
          "user_id",
          "address_id",
          "total_amount",
          "status",
          "is_deleted",
          "created_at",
          "updated_at"
        ]
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "product_id": { "type": "string", "format": "uuid" },
          "quantity": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        },
        "required": ["product_id", "quantity"]
      },
      "PaymentCreateInput": {
        "type": "object",
        "properties": {
          "order_id": { "type": "string", "format": "uuid" },
          "user_id": { "type": "string", "format": "uuid" },
          "amount": { "type": "number", "minimum": 0, "exclusiveMinimum": true }
        },
        "required": ["order_id", "user_id", "amount"]
      },
      "PaymentResponse": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "order_id": { "type": "number" },
          "user_id": { "type": "number" },
          "amount": { "type": "number" },
          "provider": { "type": "string" },
          "transaction_id": { "type": "string", "nullable": true },
          "status": { "type": "string" },
          "is_deleted": { "type": "boolean" },
          "created_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          },
          "updated_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          }
        },
        "required": [
          "uuid",
          "order_id",
          "user_id",
          "amount",
          "provider",
          "transaction_id",
          "status",
          "is_deleted",
          "created_at",
          "updated_at"
        ]
      },
      "PermissionResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "name": { "type": "string" },
          "created_at": { "type": "string" },
          "updated_at": { "type": "string" }
        },
        "required": ["id", "name", "created_at", "updated_at"]
      },
      "ReviewCreateInput": {
        "type": "object",
        "properties": {
          "user_id": { "type": "string", "format": "uuid" },
          "product_id": { "type": "string", "format": "uuid" },
          "rating": { "type": "integer", "minimum": 1, "maximum": 5 },
          "comment": { "type": "string" }
        },
        "required": ["user_id", "product_id", "rating"]
      },
      "ReviewResponse": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "user_id": { "type": "number" },
          "product_id": { "type": "number" },
          "rating": { "type": "number" },
          "comment": { "type": "string", "nullable": true },
          "is_deleted": { "type": "boolean" },
          "created_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          },
          "updated_at": {
            "anyOf": [{ "type": "string" }, { "type": "string" }]
          }
        },
        "required": ["uuid", "user_id", "product_id", "rating", "comment", "is_deleted", "created_at", "updated_at"]
      },
      "ReviewFilter": {
        "type": "object",
        "properties": {
          "product_id": { "type": "string", "format": "uuid" },
          "min_rating": { "type": "integer", "minimum": 1, "maximum": 5 },
          "max_rating": { "type": "integer", "minimum": 1, "maximum": 5 },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "offset": { "type": "integer", "minimum": 0 }
        }
      },
      "IdParam": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "minimum": 0, "exclusiveMinimum": true }
        },
        "required": ["id"]
      },
      "UuidParam": {
        "type": "object",
        "properties": { "uuid": { "type": "string", "format": "uuid" } },
        "required": ["uuid"]
      }
    }
  }
}
